<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE X3D PUBLIC "ISO//Web3D//DTD X3D 3.0//EN" "https://www.web3d.org/specifications/x3d-3.0.dtd">
<X3D profile='Immersive' version='3.0' xmlns:xsd='http://www.w3.org/2001/XMLSchema-instance' xsd:noNamespaceSchemaLocation='https://www.web3d.org/specifications/x3d-3.0.xsd'>
  <head>
    <meta content='CoordinateInterpolator2dPrototype.x3d' name='title'/>
    <meta content='CoordinateInterpolator2D prototype declaration, to interpolate across an array of Vector2FloatArray/MFVec2f values to produce an interpolated Vector2FloatArray - click text to see example.' name='description'/>
    <meta content='Don Brutzman, Jeff Weekley, Jane Wu' name='creator'/>
    <meta content='28 June 2001' name='created'/>
    <meta content='20 January 2020' name='modified'/>
    <meta content='https://www.web3d.org/technicalinfo/specifications/vrml97/part1/concepts.html#4.6.8' name='reference'/>
    <meta content='https://www.web3d.org/technicalinfo/specifications/vrml97/part1/nodesRef.html#CoordinateInterpolator' name='reference'/>
    <meta content='CoordinateInterpolator2D' name='subject'/>
    <meta content='https://www.web3d.org/x3d/content/examples/Basic/development/CoordinateInterpolator2dPrototype.x3d' name='identifier'/>
    <meta content='X3D-Edit 3.3, https://savage.nps.edu/X3D-Edit' name='generator'/>
    <meta content='../license.html' name='license'/>
  </head>
  <Scene>
    <WorldInfo title='CoordinateInterpolator2dPrototype.x3d'/>
    <ProtoDeclare appinfo='Provide interpolation capability for Vector2FloatArray/MFVec2f values' documentation='https://www.web3d.org/technicalinfo/specifications/vrml97/part1/concepts.html#4.6.8' name='CoordinateInterpolator2D'>
      <ProtoInterface>
        <field accessType='inputOnly' appinfo='Regular interpolator-style input, the set_fraction eventIn receives an SFFloat event and causes the interpolator function to evaluate resulting in a value_changed eventOut with the same timestamp as the set_fraction event.' name='set_fraction' type='SFFloat'/>
        <field accessType='inputOnly' name='set_key' type='MFFloat'/>
        <field accessType='inputOutput' appinfo='keyValue holds the array of Vector2FloatArrays that match each animation key.' name='key' type='MFFloat'/>
        <field accessType='outputOnly' appinfo='Array sequentially increasing typically [0..1]. Must have the same number of keys as keyValues.' name='key_changed' type='MFFloat'/>
        <field accessType='inputOnly' appinfo='Array of integer values. Must have the same number of keys as keyValues.' name='set_keyValue' type='MFVec2f'/>
        <field accessType='inputOutput' appinfo='keyValue holds the array of Vector2FloatArrays that match each animation key.' name='keyValue' type='MFVec2f'/>
        <field accessType='outputOnly' appinfo='Array of integer values. Must have the same number of keys as keyValues.' name='keyValue_changed' type='MFVec2f'/>
        <field accessType='outputOnly' appinfo='Regular interpolator-style output, the interpolator function averages between respective keyValue Vector2FloatArrays resulting in a Vector2FloatArray value_changed eventOut with the same timestamp as the set_fraction event.' name='value_changed' type='MFVec2f'/>
      </ProtoInterface>
      <ProtoBody>
        <Group>
          <Switch whichChoice='-1'>
            <ScalarInterpolator DEF='KeyHolder'>
              <IS>
                <connect nodeField='key' protoField='key'/>
              </IS>
            </ScalarInterpolator>
            <Shape>
              <IndexedFaceSet>
                <TextureCoordinate DEF='KeyValueHolder'>
                  <IS>
                    <connect nodeField='point' protoField='keyValue'/>
                  </IS>
                </TextureCoordinate>
              </IndexedFaceSet>
              <Appearance DEF='DefaultAppearance'>
                <Material/>
              </Appearance>
            </Shape>
          </Switch>
          <Script DEF='InterpolationScript' directOutput='true'>
            <field accessType='inputOnly' name='set_fraction' type='SFFloat'/>
            <field accessType='initializeOnly' appinfo='local variable' name='fraction' type='SFFloat' value='0.0'/>
            <field accessType='inputOnly' name='set_key' type='MFFloat'/>
            <field accessType='initializeOnly' name='keyHolderNode' type='SFNode'>
              <ScalarInterpolator USE='KeyHolder'/>
            </field>
            <field accessType='outputOnly' name='key_changed' type='MFFloat'/>
            <field accessType='inputOnly' name='set_keyValue' type='MFVec2f'/>
            <field accessType='initializeOnly' name='keyValueHolderNode' type='SFNode'>
              <TextureCoordinate USE='KeyValueHolder'/>
            </field>
            <field accessType='outputOnly' name='keyValue_changed' type='MFVec2f'/>
            <field accessType='outputOnly' name='value_changed' type='MFVec2f'/>
            <IS>
              <connect nodeField='set_fraction' protoField='set_fraction'/>
              <connect nodeField='set_key' protoField='set_key'/>
              <connect nodeField='key_changed' protoField='key_changed'/>
              <connect nodeField='set_keyValue' protoField='set_keyValue'/>
              <connect nodeField='keyValue_changed' protoField='keyValue_changed'/>
              <connect nodeField='value_changed' protoField='value_changed'/>
            </IS>
            <![CDATA[
ecmascript:

// internal global persistent variables
var previousFraction;
var previousFractionIndex;
var blockSize;
var outputArray;

function tracePrint (outputString)
{
	var traceEnabled = false;
	if (traceEnabled) Browser.print ('[CoordinateInterpolator2D]' + outputString);
}
function alwaysPrint (outputString)
{
	Browser.print ('[CoordinateInterpolator2D]' + outputString);
}
function initialize ()
{
	key      = keyHolderNode.key;
	keyValue = keyValueHolderNode.point;
	previousFractionIndex = -1;
	previousFraction = 0;
	// check key array ranges [0..1] and is monotonically increasing
	// check that size of keyValue array is integer multiple of size of key array
	tracePrint ('key            =' + key);
	tracePrint ('key.length= ' + key.length);
	tracePrint ('keyValue=   ' + keyValue);
	tracePrint ('keyValue.length=' + keyValue.length);
	blockSize =  keyValue.length/key.length;
	tracePrint ('blockSize=' + blockSize);
	if (blockSize != Math.round(blockSize))
	{
	  alwaysPrint ('*** warning:  blockSize not an integer multiple. check sizes of key and keyValue');
	}
	if (key[0] != 0)
	{
	  alwaysPrint ('*** warning:  key[0] != 0');
	}
	if (key[key.length-1] != 1)
	{
	  alwaysPrint ('*** warning:  key[' + (key.length - 1) + '] != 1, reset from' + key[key.length-1] + ' to 1');
	  key[key.length-1] = 1;
	}
	for (index = 0; index < blockSize; index++)
	{
		if ((key[index] < 0) || (key[index] > 1))
		{
		   alwaysPrint ('*** warning:  key[' + index + '] =' + key[index] + ', out of range [0..1]');
		}
	}
	// instantiate default array, later computations just update it
	outputArray = new MFVec2f ();
	for (index = 0; index < blockSize; index++)
	{
		// dynamically grow outputArray to match initial block
		outputArray[index] = keyValue[index];
	}
	tracePrint ('initial outputArray=' + outputArray);
}

function set_fraction (inputFloat, timestamp) {
	fraction = inputFloat;
	tracePrint ('previousFractionIndex=' + previousFractionIndex
		 + ', fraction=' + fraction + ', previousFraction=' + previousFraction);

	if (fraction < 0)
	{
		tracePrint ('*** illegal fraction' + fraction + ' set to 0');
		fraction = 0;
		previousFractionIndex = 0; // first
	}
	else if (fraction > 1)
	{
		alwaysPrint ('*** illegal fraction' + fraction + ' set to 1');
		fraction = 1;
		previousFractionIndex = blockSize - 1; // last
	}
	else if (previousFractionIndex == -1)
	{
		previousFractionIndex = 0; // first
		tracePrint ('previousFractionIndex initialized for first event');
	}
	else if ((fraction >= previousFraction) && (fraction >= key[previousFractionIndex+1]))
	{
		previousFractionIndex++;
	}
	else if (fraction < previousFraction) // regress, or loop repeat without reaching one
	{
		previousFractionIndex = 0;
		while ((fraction >= key[previousFractionIndex+1]) && (previousFractionIndex < blockSize))
		{
			previousFractionIndex++;
		}
		tracePrint ('reset/reincrement previousFractionIndex to' + previousFractionIndex);
	}

	if (fraction == 1) // use final block
	{
		tracePrint ('(fraction == 1)');
		for (index = 0; index < blockSize; index++)
		{
			// update outputArray with final four keyValues
			outputArray[4 - index] = keyValue[keyValue.length - index];
		}
		previousFractionIndex = -1; // setup for restart
		tracePrint ('finished final fraction==1 block');
	}
	// when fraction matches index, calculate value_changed from corresponding keyValue array
	else if (fraction == key[previousFractionIndex])
	{
		tracePrint ('(fraction == key[previousFractionIndex])');
		for (index = 0; index < blockSize; index++)
		{
			// update outputArray - need to interpolate next
			outputArray[index] = keyValue[blockSize * (previousFractionIndex) + index];
		}
	}
	else // calculate value_changed by interpolating between adjacent keyValue arrays
	{
		partialFraction = fraction                     - key[previousFractionIndex];
		deltaFraction   = key[previousFractionIndex+1] - key[previousFractionIndex];
		percentFraction = partialFraction / deltaFraction;
	//	tracePrint ('deltaFraction   =' + deltaFraction);
	//	tracePrint ('partialFraction =' + partialFraction);
		tracePrint ('percentFraction =' + percentFraction);
		for (index = 0; index < blockSize; index++)
		{
			// no arithmetic operators provided for SFVec2f, treat element by element
			nextKeyValue  = keyValue[blockSize * (previousFractionIndex + 1) + index];
			priorKeyValue = keyValue[blockSize * (previousFractionIndex)     + index];
			deltaKeyValue = new SFVec2f (
						nextKeyValue[0] - priorKeyValue[0],
						nextKeyValue[1] - priorKeyValue[1]);
		//	tracePrint ('deltaKeyValue =' + deltaKeyValue);
			// update outputArray
			outputArray[index][0] = keyValue[blockSize * (previousFractionIndex) + index][0]
			   + percentFraction * deltaKeyValue[0];
			outputArray[index][1] = keyValue[blockSize * (previousFractionIndex) + index][1]
			   + percentFraction * deltaKeyValue[1];
		}
	}
	value_changed = outputArray;
	previousFraction = fraction;
	tracePrint ('value_changed=' + value_changed);
}

function set_key (inputArray, timestamp) {
	key = inputArray;       // update key Vector2FloatArray
	keyHolderNode.key = key; // update holder
	initialize (timestamp); // reverify key, keyValue sizes
	key_changed = key;	// eventOut
}

function set_keyValue (inputArray, timestamp) {
	keyValue = inputArray;  	// update keyValue Vector2FloatArray
	keyValueHolderNode.point = keyValue; // update holder
	initialize (timestamp); 	// reverify key, keyValue sizes
	keyValue_changed = keyValue;	// eventOut
}
]]>
          </Script>
        </Group>
      </ProtoBody>
    </ProtoDeclare>
    <!-- ====================================== -->
    <!-- Example use -->
    <Anchor description='CoordinateInterpolator2dExample' parameter='"target=_blank"' url='"CoordinateInterpolator2dExample.x3d" "https://savage.nps.edu/Savage/Tools/Animation/CoordinateInterpolator2dExample.x3d" "CoordinateInterpolator2dExample.wrl" "https://savage.nps.edu/Savage/Tools/Animation/CoordinateInterpolator2dExample.wrl"'>
      <Shape>
        <Text string='"CoordinateInterpolator2dPrototype" "defines a prototype" "" "Click on this text to see" "CoordinateInterpolator2dExample" " scene"'>
          <FontStyle justify='"MIDDLE" "MIDDLE"' size='0.7'/>
        </Text>
        <Appearance>
          <Material diffuseColor='1 1 0.2'/>
        </Appearance>
      </Shape>
    </Anchor>
  </Scene>
</X3D>