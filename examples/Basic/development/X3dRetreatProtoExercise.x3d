<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE X3D PUBLIC "ISO//Web3D//DTD X3D 3.0//EN" "https://www.web3d.org/specifications/x3d-3.0.dtd">
<X3D profile='Immersive' version='3.0' xmlns:xsd='http://www.w3.org/2001/XMLSchema-instance' xsd:noNamespaceSchemaLocation='https://www.web3d.org/specifications/x3d-3.0.xsd'>
  <head>
    <meta content='X3DRetreatProtoExercise.x3d' name='title'/>
    <meta content='Don Brutzman' name='creator'/>
    <meta content='25 May 2000' name='created'/>
    <meta content='20 October 2019' name='modified'/>
    <meta content='Contains multiple intentional warnings and errors, for validation testing purposes.' name='error'/>
    <meta content='Solutions to the Proto Exercise posed by Chris Marrin of SONY at the May 2000 X3D Retreat. This exercise includes intentionally illegal VRML and does not render.' name='description'/>
    <meta content='https://www.web3d.org/x3d/sony/X3DRetreatProtoEx.html' name='reference'/>
    <meta content='https://www.web3d.org/x3d/content/examples/development/X3DRetreatProtoExercise.x3d' name='identifier'/>
    <meta content='X3D-Edit 3.1, https://www.web3d.org/x3d/content/README.X3D-Edit.html' name='generator'/>
    <meta content='../license.html' name='license'/>
  </head>
  <Scene>
    <!-- ============= Example 1 ============= -->
    <!-- GeometryNode and ChildNode are not valid node types, so used type Node/Nodes instead. -->
    <!-- Note exercise example is incomplete and has no node(s) defined for body content. -->
    <!-- X3D DTD can correctly detect these content errors if they occur, scene will be well-formed but not valid. -->
    <ProtoDeclare name='MyProto'>
      <ProtoInterface>
        <field accessType='initializeOnly' name='geometry' type='SFNode' value='NULL'/>
        <field accessType='initializeOnly' name='children' type='MFNode' value='NULL'/>
      </ProtoInterface>
      <ProtoBody>
        <WorldInfo info='"Added this node as PROTO body, so that the example can be valid VRML"'/>
      </ProtoBody>
    </ProtoDeclare>
    <!-- ============= Example 2 ============= -->
    <!-- Adding new fields to an existing node. -->
    <!-- Corrected example by moving Material from PROTO interface to PROTO body. -->
    <ProtoDeclare name='PhysicalMaterial'>
      <ProtoInterface>
        <field accessType='inputOutput' name='mass' type='SFFloat' value='1'/>
        <field accessType='initializeOnly' name='hardness' type='SFFloat' value='1'/>
        <field accessType='initializeOnly' name='friction' type='SFFloat' value='1'/>
      </ProtoInterface>
      <ProtoBody>
        <Material DEF='M'/>
        <!-- EXPORT M (this is Blendo nomenclature, not VRML 97) -->
      </ProtoBody>
    </ProtoDeclare>
    <!-- ============= Example 3a ============= -->
    <!-- Consider new possibility of declaring a field PROTO. -->
    <!-- Again no body provided in this example (since goal is a new FieldPROTO construct). -->
    <ProtoDeclare name='Plane'>
      <ProtoInterface>
        <!-- FIELDPROTO -->
        <field accessType='initializeOnly' name='normal' type='SFVec3f' value='0 0 1'/>
        <field accessType='initializeOnly' name='distance' type='SFFloat' value='0'/>
      </ProtoInterface>
      <ProtoBody>
        <WorldInfo info='"Added this node as PROTO body, so that the example can be valid VRML"'/>
      </ProtoBody>
    </ProtoDeclare>
    <!-- ============= Example 3b ============= -->
    <!-- Example 3b employs the supposed field PROTO. -->
    <!-- X3D DTD currently restricts field types to VRML 97 types, and so flags these untyped fields as an error. -->
    <!-- We could allow unspecified field types, but would lose checking (and authoring suggestions) on existing types. -->
    <ProtoDeclare name='BSPLeaf'>
      <ProtoInterface>
        <!-- Intentionally invalid type values used. -->
        <field accessType='initializeOnly' name='plane' type='Plane' value='0 0 1 0'/>
        <field accessType='initializeOnly' name='front' type='BSPLeaf' value='NULL'/>
        <field accessType='initializeOnly' name='back' type='BSPLeaf' value='NULL'/>
        <field accessType='initializeOnly' name='children' type='MFNode' value='NULL'/>
      </ProtoInterface>
      <ProtoBody>
        <WorldInfo info='"Added this node as PROTO body, so that the example can be valid VRML"'/>
      </ProtoBody>
    </ProtoDeclare>
    <!-- ============= Example 4 ============= -->
    <!-- PROTO with routes. Example nodes moved from interface definition to body. -->
    <ProtoDeclare name='SpinGroup'>
      <ProtoInterface>
        <!-- Example 4 calls three of the field references ROUTEs, but they actually match VRML 97 'IS' statements. IS="TS.cycleInterval" IS="TS.startTime" IS="TS.stopTime" -->
        <field accessType='initializeOnly' name='speed' type='SFTime' value='1'/>
        <field accessType='initializeOnly' name='startTime' type='SFTime' value='0'/>
        <field accessType='initializeOnly' name='stopTime' type='SFTime' value='0'/>
      </ProtoInterface>
      <ProtoBody>
        <!-- Corrected example by moving nodes T, G, TS and OI from PROTO interface to PROTO body. -->
        <Transform DEF='T'>
          <!-- EXPORT G (this is Blendo nomenclature, not VRML 97) -->
          <Group DEF='G'/>
        </Transform>
        <TimeSensor DEF='TS' loop='true'/>
        <OrientationInterpolator DEF='OI' key='0 0.25 0.5 0.75 1' keyValue='0 1 0 0 0 1 0 1.57 0 1 0 3.14 0 1 0 4.71 0 1 0 0'/>
        <ROUTE fromField='fraction_changed' fromNode='TS' toField='set_fraction' toNode='OI'/>
        <ROUTE fromField='value_changed' fromNode='OI' toField='set_rotation' toNode='T'/>
      </ProtoBody>
    </ProtoDeclare>
    <!-- ============= Example 5 ============= -->
    <!-- Show "overriding of a method of the inherited interface." -->
    <!-- X3D DTD currently restricts field types to VRML 97 types, other values can be entered but are flagged as invalid. IS="RENDERscript.plane" IS="RENDERscript.front" IS="RENDERscript.back" -->
    <ProtoDeclare name='BSPLeaf'>
      <ProtoInterface>
        <field accessType='initializeOnly' name='plane' type='Plane' value='0 0 1 0'/>
        <field accessType='initializeOnly' name='front' type='BSPLeaf' value='NULL'/>
        <field accessType='initializeOnly' name='back' type='BSPLeaf' value='NULL'/>
      </ProtoInterface>
      <ProtoBody>
        <!-- Here is a curious example problem: an unattached function overriding an unspecified (but commonly occuring) implementation-specific browser function. -->
        <!-- This solution wraps a Script node around the render () function to maintain VRML 97 semantics. -->
        <!-- Preprocessing can automate this process of wrapping a Script node around inline functions. -->
        <!-- Corrected example by moving Group G (renamed GG) from PROTO interface to PROTO body. -->
        <Group DEF='GG'/>
        <Script DEF='RENDERscript'>
          <![CDATA[
ecmascript:
function render()
{
 var result = plane.onPlane(System.sceneManager.getCameraPos());
 if (result < 0) {
  front.render();
  G.render();
  back.render();
 }
 else if (result > 0) {
  back.render();
  G.render();
  front.render();
 }
 else {
  front.render();
  back.render();
 }
}
]]>
        </Script>
      </ProtoBody>
    </ProtoDeclare>
    <!-- ============= Example 6 ============= -->
    <!-- Show "inclusion of field scripts which execute whenever the field receives an event." -->
    <ProtoDeclare name='AnimatedMaterial'>
      <ProtoInterface>
        <!-- FROM is Blendo nomenclature, expressed using IS references. IS="timeBase.startTime" IS="timeBase.stopTime" -->
        <field accessType='initializeOnly' name='startTime' type='SFTime' value='0'/>
        <field accessType='initializeOnly' name='stopTime' type='SFTime' value='0'/>
        <field accessType='initializeOnly' name='startColor' type='SFColor' value='0 0 0'/>
        <field accessType='initializeOnly' name='endColor' type='SFColor' value='0 0 0'/>
        <!-- During the December 3 1999 x3d-contributors meeting, Chris showed how -->
        <!-- the VRML 97 specification allows an SF/MFNode field node to be initialized with node content. -->
        <!-- This construct is now permitted by DTD, here is an example: -->
        <field accessType='initializeOnly' name='initializedChildren' type='MFNode'>
          <Group bboxCenter='1 2 3'/>
          <Transform translation='1 2 3'/>
        </field>
      </ProtoInterface>
      <ProtoBody>
        <!-- Moved the following content nodes from PROTO interface to PROTO body in order to match valid VRML 97 content. -->
        <Material DEF='MM'/>
        <ProtoInstance name='IntervalSensor'>
          <fieldValue name='timeBase'>
            <ProtoInstance DEF='timeBase' name='TimeBase'/>
          </fieldValue>
        </ProtoInstance>
        <ColorInterpolator DEF='CI' key='0 0.5 1'/>
        <Script DEF='AnimatedMaterialInitialize'>
          <![CDATA[
ecmascript:
{ // simple exercise for reader to initialize/update PROTO field values
  // to the MM Material node.  Be sure to add some IS statements to match.
}
]]>
        </Script>
        <ROUTE fromField='value_changed' fromNode='CI' toField='set_diffuseColor' toNode='MM'/>
      </ProtoBody>
    </ProtoDeclare>
  </Scene>
</X3D>